<?php
/**
 * Overview, Affiliation, Publications, Research, Awards, Linkages, Supervision.
 */

/**
 * Helper that is used to create menu callbacks and blocks for the various elements.
 *
 * @param $enabled_only
 *   Boolean that determines whether all or only enabled elemnts should
 *   be returned.
 */
function faeprofile_elements($enabled_only = FALSE) {
  $elements = array(
    'overview' => t('Overview'),
    'affiliations' => t('Affiliation'),
    'publications' => t('Publications'),
    'research' => t('Research'),
    'awards' => t('Awards'),
    'linkages' => t('Linkages'),
    'supervision' => t('Supervision'),
    'information' => t('Information'),
    'contact' => t('Contact'),
    'qualifications' => t('Qualifications'),
  );

  if (!$enabled_only) {
    return $elements;
  }

  $enabled = array_filter(variable_get('faeprofile_elements', array()));

  return array_intersect_key($elements, $enabled);
}

/**
 * Helper to return a label for a given element.
 */
function faeprofile_element_label($element) {
  $elements = faeprofile_elements();
  return $elements[$element];
}

/**
 * Implements hook_init().
 */
function faeprofile_init() {
  drupal_add_css( drupal_get_path('module', 'faeprofile') . '/css/faeprofile.css');
}

/**
 * Implements hook_permission().
 */
function faeprofile_permission() {
  $permissions = array();

  $permissions['administer faeprofile'] = array(
    'title' => t('Administer FaE Profile'),
    'description' => t('Choose which FaE Profile tabs are shown on user profile pages.'),
  );

  foreach (faeprofile_elements() as $element => $label) {
    $permissions['view faeprofile ' . $element] = array(
      'title' => t('View FaE @label information', array('@label' => $label)),
      'description' => t('View Find an Expert @label information on user profiles', array('@label' => $label)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function faeprofile_menu() {
  $items = array();
  $weight = 0;

  $items['admin/config/people/faeprofile'] = array(
    'title' => t('FaE Profile'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faeprofile_settings_form'),
    'access arguments' => array('administer faeprofile'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'faeprofile.admin.inc',
  );

/*
  foreach (faeprofile_elements(TRUE) as $element => $label) {
    if ($element == 'overview' || $element == 'contact') {
      continue;
    }

    $function = 'faeprofile_page_' . $element;
    $items['user/%user/' . $element] = array(
      'title' => t('@element', array('@element' => $label)),
      'page callback' => $function,
      'page arguments' => array(1),
      'access callback' => 'faeprofile_user_access',
      'access arguments' => array('view faeprofile ' . $element, 1),
      'type' => MENU_LOCAL_TASK,
      'weight' => ++$weight,
      'file' => 'faeprofile.pages.inc',
    );
  }
*/

  // Auto assign supervision for users
  $items['admin/config/people/faeprofile/update'] = array(
    'title' => t('Update supervision statuses'),
    'page callback' => 'faeprofile_supervision_update',
    'access arguments' => array('administer faeprofile'),
    'type' => MENU_CALLBACK,
  );

	// Clean a find an expert profile
	$items['admin/config/people/faeprofile/clean_cache'] = array(
    'title' => t('Clean a find an expert profile'),
    'page callback' => 'faeprofile_clean_cache',
    'access arguments' => array('administer faeprofile'),
    'type' => MENU_CALLBACK,
  );	

  return $items;
}

/**
 * Access callback for faeprofile tabs.
 *
 * Return TRUE only if a user has the correct permission and the resource
 * is present.
 */
function faeprofile_user_access($permission, $account) {
  $access = user_access($permission);

  // Seperate check for the extra profile field.
  if ($permission == 'view faeprofile information') {
    $value = trim(strip_tags($account->field_profile_profile['und'][0]['value']));
    $resource = !empty($value);
  }
  else {
    $resource = !empty($account->field_fae_resource['und'][0]['url']);
  }

  return ($access && $resource);
}

/**
 * Implements hook_menu_alter().
 */
function faeprofile_menu_alter(&$items) {
  if (variable_get('faeprofile_main', 0)) {
    $items['user/%user/view']['title'] = t('Overview');
    $items['user/%user/edit']['weight'] = 10;
  }
}

/**
 * Implements hook_block_info().
 */
function faeprofile_block_info() {
  $blocks = array();
  $blocks['faeprofile'] = array(
    'info' =>  t('Fae Profile: Combined overview'),
  );
  foreach (faeprofile_elements() as $element => $label) {
    $blocks[$element]['info'] = t('Fae Profile: @element', array('@element' => $label));
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function faeprofile_block_view($delta) {
  // Only show on a user page.
  if ((arg(0) != 'user') && (count(arg()) < 2)) {
    return array();
  }

  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  $function = 'faeprofile_page_' . $delta;

  if (!function_exists($function)) {
    return array();
  }

  $account = menu_get_object('user');
  if (empty($account->field_fae_resource['und'][0]['url'])) {
    return array();
  }

  // Make the API call and return themed data.
  $content = call_user_func($function, $account);

  // We need to trim the content, so the block is hidden if all we got is
  // some stealth whitespace.
  $content = trim($content);

  if (empty($content)) {
    return array();
  }

  return array(
    'subject' => t('FaE Profile @delta', array('@delta' => ucwords($delta))),
    'content' => $content,
  );
}

/**
 * Implements hook_user_presave().
 */
function faeprofile_user_presave(&$edit, $account, $category) {
  if (!function_exists('uom_fae_api_person_supervision')) {
    return;
  }

  // If missing the user field that stores supervisor status...
  if (!isset($account->field_person_supervision)) {
    return;
  }

  // Load the supervisor status from FaE and set a flag on the user.
  if (!empty($account->field_fae_resource[LANGUAGE_NONE][0]['url'])) {
		// NOTE: clean the find an expert cache, before this presave, because uom_fae_api_person_supervision always return cache data.
    $supervision = uom_fae_api_person_supervision($account->field_fae_resource[LANGUAGE_NONE][0]['url']);
    $edit['field_person_supervision']['und'][0]['value'] = (!empty($supervision) && $supervision['supervisor'] == 'Y') ? 1 : 0;
  }
}

/**
 * Implements hook_user_view().
 */
function faeprofile_user_view($account, $view_mode, $langcode) {

  module_load_include('inc', 'faeprofile', 'faeprofile.pages');

  if (!function_exists('faeprofile_page_overview')) {
    return;
  }

/*
  if (user_access('view faeprofile overview')) {
    $account->content['faeprofile_overview'] = array(
      '#type' => 'user_profile_item',
      '#markup' => faeprofile_page_overview($account),
      '#attributes' => array('class' => array('faeprofile-overview')),
      '#weight' => -10,
    );
  }
*/

	/* 
	 * Hide this, since we can aggregate info in the overview tab
	 * See http://cc.dev.arts.unimelb.edu.au/admin/config/people/faeprofile for example
	 */
  if (variable_get('faeprofile_information', 0) && user_access('view faeprofile information')) {
    $account->content['faeprofile_information'] = array(
      '#type' => 'user_profile_item',
      '#markup' => faeprofile_page_information($account),
      '#attributes' => array('class' => array('faeprofile-information')),
      '#weight' => -9,
    );
  }

}

/**
 * Implements template_preprocess_user_profile().
 *
 * Turn off all but the overview, if required.
 */
function faeprofile_preprocess_user_profile(&$variables) {
  if (!variable_get('faeprofile_main', 0)) {
    return;
  }

  foreach (element_children($variables['user_profile']) as $element) {
    if ($element != 'faeprofile_overview' && $element != 'faeprofile_information') {
      unset($variables['user_profile'][$element]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function faeprofile_theme() {
  return array(
    'faeprofile_information' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-information',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_overview' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-overview',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_contact' => array(
      'variables' => array(
        'data' => array(
          'email' => '',
          'phone' => '',
          'webpage' => '',
          'room' => '',
          'building' => 'University of Melbourne',
          'supervisor' => 'N',
        ),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-contact',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_affiliations' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-affiliations',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_publications' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-publications',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_research' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-research',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_awards' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-awards',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_qualifications' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-qualifications',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_linkages' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-linkages',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_supervision' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-supervision',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_thumbnail' => array(
      'variables' => array(
        'thumbnail' => NULL,
				'actualFilePart' => NULL,
        'style' => 'medium'
      ),
    ),
		'faeprofile_image_markup' => array(
      'variables' => array(
        'path' => NULL,
      ),
    ),
    'faeprofile_affiliation' => array(
      'variables' => array(
        'affiliation' => NULL,
      ),
    ),
    'faeprofile_publication_default' => array(
      'variables' => array(
        'publication' => NULL,
      ),
    ),
		'faeprofile_publication_whole_book' => array(
      'variables' => array(
        'publication' => NULL,
      ),
    ),
		'faeprofile_publication_translated_book' => array(
      'variables' => array(
        'publication' => NULL,
      ),
    ),
		'faeprofile_publication_chapter' => array(
      'variables' => array(
        'publication' => NULL,
      ),
    ),
		'faeprofile_publication_journal' => array(
      'variables' => array(
        'publication' => NULL,
      ),
    ),
    'faeprofile_grant' => array(
      'variables' => array(
        'grant' => NULL,
      ),
    ),
		'faeprofile_research_contract_list' => array(
      'variables' => array(
        'grant' => NULL,
      ),
    ),
    'faeprofile_award' => array(
      'variables' => array(
        'award' => NULL,
      ),
    ),
    'faeprofile_qualification' => array(
      'variables' => array(
        'qualification' => NULL,
      ),
    ),
    'faeprofile_linkage' => array(
      'variables' => array(
        'linkage' => NULL,
      ),
    ),
    'faeprofile_supervisor' => array(
      'variables' => array(
        'available' => 'N',
      ),
    ),
  );
}


function theme_faeprofile_thumbnail($vars) {
  if (empty($vars['thumbnail'])) {
    return NULL;
  }

	if (empty($vars['actualFilePart'])) {
    return NULL;
  }

  $ret = preg_match('/^(http:\/\/[A-Za-z0-9\.-]+)\/individual\/image\/([a-z0-9]+)$/', $vars['thumbnail'], $matches);
  if (!$ret) {
    return NULL;
  }

  $image = $matches[1]. $vars['actualFilePart'];

  // It seems imagecache_external not able to flush/delete image files.
  $output = theme('faeprofile_image_markup', array('path' => $image));

  return $output;
}



function theme_faeprofile_image_markup($vars) {
	if(empty($vars['path'])) {
    return NULL;
  }	

	$markup = '<img src="'. $vars['path']. '" alt="" />';
	return $markup;	
}


/**
 * Theme a supervision status.
 */
function theme_faeprofile_supervisor($vars) {
  $available = $vars['available'];
  return ($vars['available'] == 'Y') ? t('<span class="faeprofile-supervisor-available">Available</span>') : t('<span class="faeprofile-supervisor-unavailable">Not available</span>');
}

/**
 * Theme a grant.
 */
function theme_faeprofile_grant($vars) {
  $output = t('<a href="!link">!title</a> (@scheme) awarded by @organisation', array(
    '!title' => $vars['grant']['grant'],
    '!link' => $vars['grant']['link'],
    '@scheme' => !empty($vars['grant']['scheme']) ? $vars['grant']['scheme'] : '',
    '@organisation' => $vars['grant']['organisation']
  ));

  if (!empty($vars['grant']['start'])) {
    $output .= t(' <span class="faeprofile-listDateTime">@start-@end</span>', array(
      '@start' => $vars['grant']['start'],
      '@end' => $vars['grant']['end'],
    ));
  }

  return $output;
}

/* Theme a contract */
function theme_faeprofile_research_contract_list($vars) {
	$prize_by = '';
	if(!empty($vars['grant']['award_by'])) {
		$prize_by = 'awarded by '. t($vars['grant']['award_by']);
	}
	elseif(!empty($vars['grant']['admin_by'])) {
		$prize_by = 'administered by '. t($vars['grant']['admin_by']);
	}
	else {
		$prize_by  = '';
	}


	$output = t('<a href="!link">!title</a> @prize_by', array(
    '!title' => $vars['grant']['grant'],
    '!link' => $vars['grant']['link'],
    '@prize_by' => $prize_by, 
  ));

  if (!empty($vars['grant']['start'])) {
    $output .= t(' <span class="faeprofile-listDateTime">@start-@end</span>', array(
      '@start' => $vars['grant']['start'],
      '@end' => $vars['grant']['end'],
    ));
  }

  return $output;
}

/**
 * Theme an award.
 */
function theme_faeprofile_award($vars) {
  // If award label start with comma (year is missing at the start), remove it.
  // e.g. ", Institute for Aegean Prehistory"
  $title = ltrim($vars['award']['award'], ", ");

  $output = t('<a href="!link">!title</a>, @organisation', array(
    '!title' => $title,
    '!link' => $vars['award']['link'],
    '@organisation' => $vars['award']['organisation']
  ));

  if (!empty($vars['award']['year'])) {
    $output .= t(' <span class="faeprofile-listDateTime">@year</span>', array(
      '@year' => $vars['award']['year'],
    ));
  }

  return $output;
}

/**
 * Theme a linkage.
 */
function theme_faeprofile_linkage($vars) {
  return t('!organisation (@role)', array(
    '!organisation' => l($vars['linkage']['orgLabel'], $vars['linkage']['org']),
    '@role' => $vars['linkage']['roleLabel'],
  ));
}

/**
 * Theme an affiliation.
 */
function theme_faeprofile_affiliation($vars) {
  return t('@organisation. @role. @start_end_time', array(
    '@organisation' => $vars['affiliation']['organisation'],
    '@role' => $vars['affiliation']['role'],
		'@start_end_time' => $vars['affiliation']['start_end_time'],
  ));
}


function theme_faeprofile_publication_default($vars) {
	$output = '';

  $author_text = !empty($vars['publication']['author_text']) ? strip_tags($vars['publication']['author_text']) : '';
  $year = $vars['publication']['year'];

  $link = $vars['publication']['pub_uri'];
  $title = "'". strip_tags($vars['publication']['title']). "'";
  $out_url = '<a href="'. $link. '">'. $title. '</a>';

  $editor_text = !empty($vars['publication']['editor_text']) ? ' '. strip_tags($vars['publication']['editor_text']). ' ed(s),' : '';

	// Pub
  if(!empty($vars['publication']['parent_title'])) {
    $out_pub_parent = ' '. '<i>'. $vars['publication']['parent_title']. '</i>, ';
  }
  else if (!empty($vars['publication']['published_in'])) {
    $out_pub_parent = ' '. '<i>'. $vars['publication']['published_in']. '</i>, ';
  }
  else {
    // It is not likely empty.
    $out_pub_parent = '';
  }
  $pub_org = !empty($vars['publication']['publish_org']) ? ' '. $vars['publication']['publish_org'] : '';

  $page_start_end = !empty($vars['publication']['page_start_end']) ? ', pp. '. $vars['publication']['page_start_end'] : '';
	$volume = !empty($vars['publication']['volume']) ? ', vol. '. $vars['publication']['volume'] : '';

	// Issue
	$issue_num = !empty($vars['publication']['issue_num']) ? ', no. '. $vars['publication']['issue_num'] : '';
  $issue = !empty($vars['publication']['issue']) ? ', issue '. $vars['publication']['issue'] : '';

	$edition = !empty($vars['publication']['edition']) ? ', ed '. $vars['publication']['edition'] : '';
  $type_text = ' '.$vars['publication']['type_text'];
	$end = '.';

  // Output
  $output = $author_text. ' '. $year. ', '. $out_url. ', in'. $editor_text. $out_pub_parent. $pub_org. $volume. $issue. $issue_num. $edition. $page_start_end. $end;

  return $output;
}


function theme_faeprofile_publication_whole_book($vars) {
	$output = '';

	$author_text = !empty($vars['publication']['author_text']) ? strip_tags($vars['publication']['author_text']) : '';
	$year = $vars['publication']['year'];

  $link = $vars['publication']['pub_uri'];
  $title = "<i>". strip_tags($vars['publication']['title']). "</i>";
  $out_url = '<a href="'. $link. '">'. $title. '</a>';

	$pub_org = !empty($vars['publication']['publish_org']) ? ', '. $vars['publication']['publish_org'] : '';
	$type_text = ' '.$vars['publication']['type_text'];
	$end = '.';

	// Output
  $output = $author_text. ' '. $year. ', '. $out_url. $pub_org. $end;

	return $output;
}


function theme_faeprofile_publication_translated_book($vars) {
	$output = '';

	$author_text = !empty($vars['publication']['editor_text']) ? strip_tags($vars['publication']['editor_text']). ' ' : '';
  $translator_text = !empty($vars['publication']['author_text']) ? ', trans '. strip_tags($vars['publication']['author_text']) : '';
	$year = $vars['publication']['year'];

	$link = $vars['publication']['pub_uri'];
  $title = strip_tags($vars['publication']['title']);
	$out_url = '<a href="'. $link. '">'. $title. '</a>';

	$pub_org = !empty($vars['publication']['publish_org']) ? ', '. $vars['publication']['publish_org'] : '';
  $type_text = ' '.$vars['publication']['type_text'];
  $end = '.';	

	// Output
  $output = $author_text. ' '. $year. ', '. $out_url. $translator_text. $pub_org. $end;

	return $output;
}


// pub_parent and pub_in are basically the same, while pub_org is like publisher.
function theme_faeprofile_publication_chapter($vars) {
	$output = '';

	$author_text = !empty($vars['publication']['author_text']) ? strip_tags($vars['publication']['author_text']) : '';
	$year = $vars['publication']['year'];

	$link = $vars['publication']['pub_uri'];
	$title = "'". strip_tags($vars['publication']['title']). "'";
	$out_url = '<a href="'. $link. '">'. $title. '</a>';
	
	$editor_text = !empty($vars['publication']['editor_text']) ? ' '. strip_tags($vars['publication']['editor_text']). ' ed(s),' : '';

	if (!empty($vars['publication']['parent_title'])) {
		$out_pub_parent = ' '. '<i>'. $vars['publication']['parent_title']. '</i>'; 
	} 
	elseif (!empty($vars['publication']['published_in'])) {
		$out_pub_parent = ' '. '<i>'. $vars['publication']['published_in']. '</i>';
	}
	else {
		// It is not likely empty.
		$out_pub_parent = '';
	}

	$pub_org = !empty($vars['publication']['publish_org']) ? ', '. $vars['publication']['publish_org'] : '';

	$page_start_end = !empty($vars['publication']['page_start_end']) ? ', pp. '. $vars['publication']['page_start_end'] : '';
  $type_text = ' '.$vars['publication']['type_text'];
	$end = '.';	

	// Output
	$output = $author_text. ' '. $year. ', '. $out_url. ', in'. $editor_text. $out_pub_parent. $pub_org. $page_start_end. $end; 

	return $output;
}


function theme_faeprofile_publication_journal($vars) {
	$output = '';

  $author_text = !empty($vars['publication']['author_text']) ? strip_tags($vars['publication']['author_text']) : '';
  $year = $vars['publication']['year'];

  $link = $vars['publication']['pub_uri'];
  $title = "'". strip_tags($vars['publication']['title']). "'";
  $out_url = '<a href="'. $link. '">'. $title. '</a>';

  // Pub
  if(!empty($vars['publication']['parent_title'])) {
    $out_pub_parent = ', '. '<i>'. $vars['publication']['parent_title']. '</i>';
  }
  else if (!empty($vars['publication']['published_in'])) {
    $out_pub_parent = ', '. '<i>'. $vars['publication']['published_in']. '</i>';
  }
  else {
    // It is not likely empty.
    $out_pub_parent = '';
  }
  $pub_org = !empty($vars['publication']['publish_org']) ? ', '. $vars['publication']['publish_org'] : '';

  $page_start_end = !empty($vars['publication']['page_start_end']) ? ', pp. '. $vars['publication']['page_start_end'] : '';
  $volume = !empty($vars['publication']['volume']) ? ', vol. '. $vars['publication']['volume'] : '';

  // Issue
  $issue_num = !empty($vars['publication']['issue_num']) ? ', no. '. $vars['publication']['issue_num'] : '';
  $issue = !empty($vars['publication']['issue']) ? ', issue '. $vars['publication']['issue'] : '';

  $type_text = ' '.$vars['publication']['type_text'];
  $end = '.';

	// Output
  $output = $author_text. ' '. $year. ', '. $out_url. $out_pub_parent. $pub_org. $volume. $issue. $issue_num. $page_start_end. $end;

  return $output;
}

/**
 * Preprocess functions for faeprofile information.
 */
function template_preprocess_faeprofile_information(&$vars) {
	// NOTE: information is a drupal user profile field
	// It is called field_profile_field, so no cache necessary.  
  $information = $vars['data'];
  $vars['information'] = $information[0]['safe_value'];
}

/**
 * Preprocess functions for faeprofile overview.
 */
function template_preprocess_faeprofile_overview(&$vars) {
  $data = '';
  $uri = $vars['uri'];
  $vars['overview'] = '';
  
  $cache_id = "faeprofile:overview:$uri:". md5($uri);

	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
		// Notify to use clean backup data
		dsm('Use clean backup data');
		$data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
		$vars['overview'] = $data;
		
		// Leave early.
		return;
	}

  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
  if(!empty($data)) {
  	$vars['overview'] = $data;
  }

  if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
			$overview = $vars['data'];
			
			if(empty($overview) || $overview == 'Empty') {
				// Clear cache only
				uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
			}
			else {
				$vars['overview'] = $overview['overviewText1']. $overview['overviewText2'];			

				$data = $vars['overview'];
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
			}
  	}
  	else {
  		// Joseki is down, use the sync cache data 
			$vars['overview'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
  	}
  }
  else {
  	// $data is above. Nothing to do here.
  }
}


function template_preprocess_faeprofile_affiliations(&$vars) {
	$data = '';
  $uri = $vars['uri'];
  $vars['affiliations'] = array();
  
  $cache_id = "faeprofile:affiliation:$uri:". md5($uri);

	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
    $vars['affiliations'] = $data;

    // Leave early.
    return;
  }


  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
  if(!empty($data)) {
    $vars['affiliations'] = $data;
  }

	if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
      $affiliations = $vars['data'];
      
      if(!empty($affiliations)) {
        foreach ($affiliations as $affiliation) {
					// Prepare
					$start_time = empty($affiliation['the_start_time']) ? '' : date('Y', strtotime($affiliation['the_start_time']));
					$end_time = empty($affiliation['the_end_time']) ? '' : date('Y', strtotime($affiliation['the_end_time']));
					$start_end_time = _faeprofile_member_start_end($start_time, $end_time);

          $temp = array(
            'organisation' => check_plain($affiliation['org_label']),
            'role' => check_plain($affiliation['role_label']),
						'start_end_time' => $start_end_time,
          );
          $vars['affiliations'][] = theme('faeprofile_affiliation', array('affiliation' => $temp));
        }
      
        // Cache the data
        $data = $vars['affiliations'];
        uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
      }
      else {
        // Clear cache only
        uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
      }
    }
    else {
      // Joseki is down, so get the backup data
      $vars['affiliations'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
    }
	}
	else {
		// $data is above. Nothing to do here.
	}
}


/**
 * Preprocess functions for faeprofile publications.
 */
function template_preprocess_faeprofile_publications(&$vars) { 
	$data = '';
  $uri = $vars['uri'];
  $vars['year'] = array();

	$cache_id = "faeprofile:pub:$uri:". md5($uri);

	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
    $vars['year'] = $data;

    // Leave early.
    return;
  }
	

  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
	if(!empty($data)) {
		$vars['year'] = $data;
	}

	if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
      $pubs = $vars['data'];

			// Hack with !empty(pubs['the_author_label'])
			if(
					!empty($pubs) &&
					( isset($pubs[0]['the_author_label']) && !empty($pubs[0]['the_author_label']) )

			) {
        foreach ($pubs as $pub) {
					// Prepare
					$datestamp = strtotime($pub['the_date_value']);
					$type_array = _faeprofile_publication_type($pub['the_type']);
					$page_start_end_text = _faeprofile_page_start_end($pub['the_page_start'], $pub['the_page_end']);

					$author_text = _faeprofile_author_text($pub['the_author_label'], $pub['authors'], $pub['the_author_links']);
					$editor_text = _faeprofile_editor_text($pub['the_editor_label'], $pub['editors'], $pub['the_editor_links']);
			
					// Actual data
					$temp = array(
						'title' => $pub['the_title'],
						'pub_uri' => $pub['pub_uri'],						

						'type_code' => $type_array['type_code'],
            'type_text' => $type_array['type_text'],

						'date' => date('Y', $datestamp),
            'year' => date('Y', $datestamp),
	
						'publish_org' => $pub['the_publish_org'], 
						'published_in' => $pub['the_published_in'],
						'parent_title' => $pub['the_parent_title'],

						'edition' => $pub['the_edition'],
						'isbn13' => $pub['the_isbn13'],
						'volume' => $pub['the_volume'],
						'issue_num' => $pub['the_issue_num'],
						'issue' => $pub['the_issue'],
						'page_start_end' => $page_start_end_text,
						
						'author_text' => $author_text,
						'editor_text' => $editor_text,	
					);

					//test
					//dsm($temp);
					$year_index = $temp['year'];
          $pub_type_index = $temp['type_text'];
          $pub_uri_index = $temp['pub_uri'];
          $vars['year'][$year_index][$pub_type_index][$pub_uri_index] = _faeprofile_publication_select_theme($temp);
				} // End foreach
				krsort($vars['year']);
			
				// Cache
        $data = $vars['year'];
        uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
			} // End if
			else {
				// Clear cache only
        uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
			}
		}
		else {
      // Joseki is down, so get the backup data
      $vars['year'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
    }
	}

}


/**
 * Preprocess functions for faeprofile research.
 */
function template_preprocess_faeprofile_research(&$vars) {
	$data = '';
  $uri = $vars['uri'];

	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
		$hash = md5($uri);

		// Grants
		$cache_id = "faeprofile:research:$uri:". $hash;
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
   	$vars['grant']['year'] = $data['year'];
    $vars['grant']['extra_grant_text'] = $data['extra_grant_text']; 

		// Contract
		$cache_id = "faeprofile:contract:$uri:". $hash;
		$data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
		$vars['contract']['year'] = $data['year'];

    // Leave early.
    return;
  }

	
	// Start work on grants ---------------
	$tmp_array = array();
	$cache_id = "faeprofile:research:$uri:". md5($uri);
  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');

	if(!empty($data)) { 
    $vars['grant']['year'] = $data['year'];
    $vars['grant']['extra_grant_text'] = $data['extra_grant_text'];
  }	
	else {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
		if($uom_fae_api_is_url_reachable) {
			$grants = $vars['grant'];
			if(!empty($grants)) {
				foreach ($grants as $item) {
          $startstamp = strtotime($item['dateStart']);
          $endstamp = strtotime($item['dateEnd']);

          $tmp_array['grant'][] = array(
            'grant' => $item['grantLabel'],
            'link' => $item['grant'],
            'scheme' => $item['grantScheme'],
            'role' => $item['roleLabel'],
            'organisation' => $item['orgLabel'],
            'start' => (!empty($startstamp)) ? date('Y', $startstamp) : '',
            'end' => (!empty($endstamp)) ? date('Y', $endstamp) : '',
          );
        }
			}
			else {
				$tmp_array['grant'] = array();
			}

			// Do some grouping of research grants.
      $vars['grant']['year'] = array();
      foreach($tmp_array['grant'] as $item) {
        $vars['grant']['year'][$item['start']][] = theme('faeprofile_grant', array('grant' => $item));
      }

      krsort($vars['grant']['year']);

      // Extra grant
      $vars['grant']['extra_grant_text'] = array();
      $extra_grant_text = _faeprofile_extra_grant($uri);
      if(!empty($extra_grant_text)) {
        $vars['grant']['extra_grant_text'] = $extra_grant_text;
      }

			// Cache
      $data = $vars['grant'];
      uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
      uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
		}
		else {
			// Joseki is down, so get the backup data
      $vars['grant'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
		}
	}
	// End work on grants ------------------


	// Start work on contract ------------------
	$tmp_array = array();
  $cache_id = "faeprofile:contract:$uri:". md5($uri);
  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');	

	if(!empty($data)) {
		$vars['contract']['year'] = $data['year'];
  }	
	else {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
		if($uom_fae_api_is_url_reachable) {
			$contracts = $vars['contract'];
			if(!empty($contracts)) {
        foreach ($contracts as $item) {
          $startstamp = strtotime($item['dateStart']);
          $endstamp = strtotime($item['dateEnd']);

          $tmp_array['contract'][] = array(
            'grant' => $item['grantLabel'],
            'link' => $item['grant'],
            'role' => $item['roleLabel'],
            'award_by' => $item['orgLabelAward'],
            'admin_by' => $item['orgLabelAdmin'],
            'organisation' => $item['orgLabel'],
            'start' => (!empty($startstamp)) ? date('Y', $startstamp) : '',
            'end' => (!empty($endstamp)) ? date('Y', $endstamp) : '',
          );
        }
      }
      else {
        $tmp_array['contract'] = array();
      }

      // Do some grouping of research contracts.
      $vars['contract']['year'] = array();
      foreach($tmp_array['contract'] as $item) {
        $vars['contract']['year'][$item['start']][] = theme('faeprofile_research_contract_list', array('grant' => $item));
      }

      krsort($vars['contract']['year']);

			// Cache
      $data = $vars['contract'];
      uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
      uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
		}
		else {
			// Joseki is down, so get the backup data
      $vars['contract'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
		}
	}
	// End work on contract --------------------

	// Clean
  unset($tmp_array);
}


/**
 * Preprocess functions for faeprofile awards.
 */
function template_preprocess_faeprofile_awards(&$vars) {
	$data = '';
	$uri = $vars['uri'];
	$vars['awards'] = array();
	
	$cache_id = "faeprofile:award:$uri:". md5($uri);

	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
    $vars['awards'] = $data;

    // Leave early.
    return;
  }
	
	$data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
	if(!empty($data)) {
		$vars['awards'] = $data;
	}
	
	if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
			$awards = $vars['data'];
			
			if(!empty($awards)) {
				foreach ($awards as $award) {
    			$timestamp = strtotime($award['dateValue']);

					$temp = array(
						'award' => $award['awardLabel'],
						'link' => $award['award'],
						'organisation' => $award['orgLabel'],
						'year' => (!empty($timestamp)) ? date('Y', $timestamp) : '',
					);
					$tmp_array[] = $temp;
				}

				// Sort by year desc
				usort($tmp_array, function($a, $b) {
					return $b['year'] - $a['year'];
				});	

				//
				foreach($tmp_array as $element) {
					$vars['awards'][] = theme('faeprofile_award', array('award' => $element));
				}
				
				// Cache and backup
				$data = $vars['awards'];
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
			}
			else {
				// Clear cache only
				uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
			}
		}
		else {
			// Joseki is down, so get the backup data
			$vars['awards'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
		}
	}
	else {
		// Nothing
	}	
}

/**
 * Preprocess functions for faeprofile linkages.
 */
function template_preprocess_faeprofile_linkages(&$vars) {
  $data = '';
  $uri = $vars['uri'];
  $vars['linkages'] = array();
  
  $cache_id = "faeprofile:linkages:$uri:". md5($uri);
 
	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
    $vars['linkages'] = $data;

    // Leave early.
    return;
  }
 
	$data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
	if(!empty($data)) {
		$vars['linkages'] = $data;
	}
  
  if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
			$linkages = $vars['data'];
			if(!empty($linkages)) {
				foreach ($linkages as $linkage) {
					$vars['linkages'][] = theme('faeprofile_linkage', array('linkage' => $linkage));
				}
				
				// Cache and backup
				$data = $vars['linkages'];
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
			}
			else {
				// Clear cache only
				uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
			}
		}
		else {
			// Joseki is down, so get the backup data
			$vars['linkages'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
		}	
  }
  else {
  	// Nothing
  }
}

/**
 * Preprocess functions for faeprofile supervision.
 */
function template_preprocess_faeprofile_supervision(&$vars) {
  $data = '';
  $uri = $vars['uri'];
  $vars['available'] = array();
  $vars['supervision'] = array();
  
  $cache_id = "faeprofile:supervision:$uri:". md5($uri);
 
	// Force to use fae_profile_custom_cache
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
   	$vars['available'] = $data['available'];
    $vars['supervision'] = $data['supervision']; 

    // Leave early.
    return;
  }
 
  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
	if(!empty($data)) {
		$vars['available'] = $data['available'];
    $vars['supervision'] = $data['supervision'];
	}
  
  if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
  		$supervision = $vars['data'];
  		if(!empty($supervision)) {
  			$vars['available'] = theme('faeprofile_supervisor', array('available' => $supervision['supervisor']));
  			$vars['supervision'] = $supervision['supervisorText1'];
  			
  			// Cache and backup
				$data = $vars;
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
  		}
  		else {
  			// Clear cache only
				uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
  		}
  	}
  	else {
  		// Joseki is down, so get the backup data
  		$tmp_vars = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
  		$vars['available'] = $tmp_vars['available'];
  		$vars['supervision'] = $tmp_vars['supervision'];
  	}
  }
  else {
  	// Nothing
  }
  
}

/**
 * Preprocess functions for faeprofile contact.
 */
function template_preprocess_faeprofile_contact(&$vars) {
  $data = '';
  $uri = $vars['uri'];
 
  $cache_id = "faeprofile:contact:$uri:". md5($uri);
 
	// Force to use fae_profile_custom_cache_clean
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
  	$vars['email'] = $data['email'];
    $vars['phone'] = $data['phone'];
    $vars['webpage'] = $data['webpage'];
    $vars['room'] = $data['room'];

    $vars['building'] = $data['building'];
    $vars['supervisor'] = $data['supervisor'];
    $vars['image'] = $data['image'];
    $vars['faeprofile_id'] = $data['faeprofile_id']; 

    // Leave early.
    return;
  } 

  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
	if(!empty($data)) {
		$vars['email'] = $data['email'];
    $vars['phone'] = $data['phone'];
    $vars['webpage'] = $data['webpage'];
    $vars['room'] = $data['room'];
    
    $vars['building'] = $data['building'];
    $vars['supervisor'] = $data['supervisor'];
    $vars['image'] = $data['image'];
		$vars['faeprofile_id'] = $data['faeprofile_id'];
  }
  
  if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
  		$contact = $vars['data'];
  		
  		if(!empty($contact)) {
  			$vars['email'] = (!empty($contact['email'])) ? l($contact['email'], 'mailto:' . $contact['email']) : '';
				
				if(module_exists('unimelb_formatters')) {
					$vars['phone'] = unimelb_formatters_field_formatter_unimelb_html5_phone_link(array('value' => $contact['phone'], 'safe_value' => $contact['phone']));
				}
				else {
					$vars['phone'] = $contact['phone'];
				}
				
				$vars['webpage'] = (!empty($contact['webpage'])) ? l($contact['webpage'], $contact['webpage']) : '';
				$vars['room'] = $contact['room'];
				$vars['building'] = $contact['building'];
				$vars['supervisor'] = theme('faeprofile_supervisor', array('available'=> $contact['supervisor']));

				$vars['image'] = theme('faeprofile_thumbnail', array('thumbnail' => $contact['thumbnail'], 'actualFilePart' => $contact['actualFilePart']));  			

				$vars['faeprofile_id'] = _get_fae_id_by_uri($uri);

  			// Cache and backup
				$data = $vars;
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
  		}
  		else {
  			// Clear cache only
				uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
  		}
  	}
  	else {
  		// Joseki is down, so get the backup data
  		$tmp_vars = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
  		
  		$vars['email'] = $tmp_vars['email'];
		  $vars['phone'] = $tmp_vars['phone'];
		  $vars['webpage'] = $tmp_vars['webpage'];
		  $vars['room'] = $tmp_vars['room'];
		  
		  $vars['building'] = $tmp_vars['building'];
		  $vars['supervisor'] = $tmp_vars['supervisor'];
		  $vars['image'] = $tmp_vars['image'];
			$vars['faeprofile_id'] = $tmp_vars['faeprofile_id'];
  	}
  }
  else {
  	// Nothing
  }
  
  
}

/**
 * Preprocess functions for faeprofile qualifications.
 */
function template_preprocess_faeprofile_qualifications(&$vars) {
	$data = '';
  $uri = $vars['uri'];
  $vars['qualifications'] = array();
  
  $cache_id = "faeprofile:qualification:$uri:". md5($uri);
 
	// Force ...
	if(uom_fae_api_is_use_clean_data()) {
    $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_clean');
		$vars['qualifications'] = $data;

    // Leave early.
    return;
  }
 
  $data = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache');
	if(!empty($data)) {
    $vars['qualifications'] = $data;
	}
  
  if(empty($data)) {
		$uom_fae_api_is_url_reachable = variable_get('uom_fae_api_is_url_reachable', FALSE);
    if($uom_fae_api_is_url_reachable) {
			$qualifications = $vars['data'];
			if(!empty($qualifications)) {
				foreach ($qualifications as $qualification) {
					$qualification['timestamp'] = strtotime($qualification['dateEnd']);
					$qualification['year'] = substr($qualification['dateEnd'], 0, 4);
					$tmp_array[] = $qualification;
				}

				// Sort by year desc
				usort($tmp_array, function($a, $b) {
					return $b['year'] - $a['year'];
				});

				// 
				foreach($tmp_array as $element) {
					$vars['qualifications'][] = theme('faeprofile_qualification', array('qualification' => $element));
				}
				
				// Cache and backup
				$data = $vars['qualifications'];
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache');
				uom_fae_api_profile_custom_cache_set($cache_id, $data, 'fae_profile_custom_cache_sync');
			}
			else {
				// Clear cache only
				uom_fae_api_profile_custom_cache_set($cache_id, '', 'fae_profile_custom_cache');
			}
		}
		else {
			// Joseki is down, so get the backup data
			$vars['qualifications'] = uom_fae_api_profile_custom_cache_get($cache_id, 'fae_profile_custom_cache_sync');
		}	
  }
  else {
  	// Nothing
  }
}

/**
 * Theme a qualification.
 */
function theme_faeprofile_qualification($vars) {
	if($vars['qualification']['timestamp'] === FALSE) {
		// Empty timestamp
		$display_year = '';	
	}
	else {
		$display_year = ', '. date('Y', $vars['qualification']['timestamp']);
	}


  return t('@degree (@organisation@year)', array(
    '@degree' => $vars['qualification']['degreeLabel'],
    '@organisation' => $vars['qualification']['orgLabel'],
    '@year' => $display_year,
  ));
}

/**
 * Wrappers that help expose our page callbacks.
 */
function _faeprofile_account_wrapper($resource) {
  $account = stdClass();
  $account->field_fae_resource['und'][0]['url'] = $resource;
  return $account;
}

/**
 * Wrapper for the information page.
 */
function faeprofile_information_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_information($account, FALSE);
}

/**
 * Wrapper for the overview page.
 */
function faeprofile_overview_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_overview($account, FALSE);
}

/**
 * Wrapper for the affiliations page.
 */
function faeprofile_affiliations_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_affiliations($account, FALSE);
}

/**
 * Wrapper for the publications page.
 */
function faeprofile_publications_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_publications($account, FALSE);
}

/**
 * Wrapper for the research page.
 */
function faeprofile_research_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_research($account, FALSE);
}

/**
 * Wrapper for the awards page.
 */
function faeprofile_awards_callback_wrapper($resource) {
  $account = _faeprofile_awards_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_awards($account, FALSE);
}

/**
 * Wrapper for the linkages page.
 */
function faeprofile_linkages_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_linkages($account, FALSE);
}

/**
 * Wrapper for the supervision page.
 */
function faeprofile_supervision_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_supervision($account, FALSE);
}

/**
 * Wrapper for the contact page.
 */
function faeprofile_contact_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_contact($account, FALSE);
}

/**
 * Wrapper for the qualifications page.
 */
function faeprofile_qualifications_callback_wrapper($resource) {
  $account = _faeprofile_account_wrapper($resource);
  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  return faeprofile_page_qualifications($account, FALSE);
}

/**
 * Implements hook_uom_fae_api_callbacks().
 */
function faeprofile_uom_fae_api_callbacks() {
  return array(
    'faeprofile_information_callback_wrapper' => t('Person: General information'),
    'faeprofile_overview_callback_wrapper' => t('Person: Overview'),
    'faeprofile_affiliations_callback_wrapper' => t('Person: Affiliations'),
    'faeprofile_publications_callback_wrapper' => t('Person: Publications'),
    'faeprofile_research_callback_wrapper' => t('Person: Research'),
    'faeprofile_awards_callback_wrapper' => t('Person: Awards'),
    'faeprofile_linkages_callback_wrapper' => t('Person: Linkages'),
    'faeprofile_supervision_callback_wrapper' => t('Person: Supervisor availability'),
    'faeprofile_contact_callback_wrapper' => t('Person: Contact information'),
    'faeprofile_qualifications_callback_wrapper' => t('Person: Qualifications'),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function faeprofile_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 *
  do this, Ctools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function faeprofile_ctools_plugin_api($module, $api) {
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * Remove "An illegal choice has been detected. Please contact the site administrator." 
 * in exposed view filter in staff listing page. (i.e. http://site.com/about/staff)
 * https://drupal.org/node/1177882, patch doesn't fix the issue, so remove the error message instead
 */
function faeprofile_preprocess_status_messages(&$vars) {
  $messages = drupal_get_messages('error');
  if (!empty($messages['error'])) {
    $errors = $messages['error'];
    foreach ($errors as $error) {
      if ($error == t('An illegal choice has been detected. Please contact the site administrator.')) {
        continue;
      }

      drupal_set_message($error, 'error');
    }
  }
}

/**
 * Implements hook_cron().
 */
function faeprofile_cron() {
  $last_run = variable_get('faeprofile_cron', 0);

  // Early return if we don't need to run at all.
  if (empty($last_run)) {
    return;
  }

  // Next run is last run plus one week.
  $next_run = $last_run + (60 * 60 * 24 * 7);

  // If the next time we should run is in the future, exit.
  if ($next_run > time()) {
    return;
  }

  $processed = 0;
  $result = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('status', 0, '<>')
    ->orderBy('uid', 'ASC')
    ->execute();

  foreach ($result as $row) {
    $account = user_load($row->uid, TRUE);
    $processed += _faeprofile_update_supervisor_status($account);
  }

  // Write a log message.
  watchdog('faeprofile', 'Updated supervisor status for @count users', array('@count' => $processed), WATCHDOG_INFO);

  // Update the last run timestamp.
  variable_set('faeprofile_cron', time());
}

/**
 * Batch functions to update user's supervisor status.
 */
function faeprofile_supervision_update() {
  $batch = array(
    'operations' => array(
      array('faeprofile_supervisor_batch_process', array()),
    ),
    'finished' => 'faeprofile_supervisor_batch_finished',
    'title' => t('Updating supervisor status'),
    'init_message' => t('Updating supervisor statuses is starting'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Supervisor status update has encountered an error.'),
    'file' => drupal_get_path('module', 'faeprofile') . '/faeprofile.batch.inc',
  );
  batch_set($batch);

  // Go back to the faeprofile admin page when done.
  batch_process('admin/config/people/faeprofile');
}

// Clean a find an expert profile
function faeprofile_clean_cache() {
	// I expect faeprofile_clean_cache_input is like 
	// http://www.findanexpert.unimelb.edu.au/individual/person16492|http://www.findanexpert.unimelb.edu.au/individual/person12345|http://www.findanexpert.unimelb.edu.au/individual/person4321
  $input = variable_get('faeprofile_clean_cache_input', '');
	$items = explode("|", $input);
	
	$table_name = 'fae_profile_custom_cache';
	foreach($items as $item) {
		// No need to escape uri
		$uri = trim($item);

		if(_faeprofile_is_fae_uri($uri)) {
			$sql = "
    		DELETE FROM
     			$table_name 
    		WHERE
      		cache_id REGEXP '$uri'
  		";

			// Notice
			$msg = "Clean find an expert cache for $uri";
			dsm($msg);

			db_query($sql);
		}
		else {
			// Notice
			$msg = "Not a proper find an expert uri: $uri";
			dsm($msg);
		}
	}

  $url = 'admin/config/people/faeprofile';
  drupal_goto($url);
}


function _faeprofile_is_fae_uri($uri) {
	$condi = false;
	$pattern = "/^http:\/\/www\.findanexpert\.unimelb\.edu\.au\/individual\/person[0-9]+$/i";
  if(preg_match($pattern, $uri)) {
		$condi = true;
	}
	else {
		$condi = false;
	}

	return $condi;
}


/**
 * Auto assign supervision status for each user. This funtion is called
 * via the Batch API callback.
 *
 * Use a helper to actually load and process a user, so we can call that from
 * hook_cron as well.
 *
 * @see https://drupal.org/node/180528
 */
function faeprofile_supervisor_batch_process(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT uid) FROM {users} WHERE status <> 0')->fetchField();
  }

  // Process 2 users at a time only.
  $limit = 2;

  $result = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('uid', $context['sandbox']['current_user'], '>')
    ->condition('status', 0, '<>')
    ->orderBy('uid', 'ASC')
    ->range(0, $limit)
    ->execute();

	// NOTE: clean the find an expert cache, before this presave, because uom_fae_api_person_supervision always return cache data.
  db_delete('fae_profile_custom_cache')->execute();

  foreach ($result as $row) {
    $account = user_load($row->uid, TRUE);
    _faeprofile_update_supervisor_status($account);

    // Store some result for post-processing in the finished callback.
    $context['results'][] = check_plain($account->name);

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_user'] = $account->uid;
    $context['message'] = t('Now processing %user', array('%user' => $account->name));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch 'finished' callback
 */
function faeprofile_supervisor_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' user profiles processed.';
    drupal_set_message($message);

    // And make sure cron runs a week from now, if enabled.
    $faeprofile_cron = variable_get('faeprofile_cron', 0) ;
    if (!empty($faeprofile_cron)) {
      variable_set('faeprofile_cron', time());
    }
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

/**
 * Helper function that updates a user's supervisor status.
 *
 * @param $account
 *   A user account object.
 *
 * @return
 *   0 if the user did not have an FaE URL and 1 if it did.
 */
function _faeprofile_update_supervisor_status($account) {
  // Early return if no resource URI.
  if (empty($account->field_fae_resource[LANGUAGE_NONE][0]['url'])) {
    return 0;
  }

	// NOTE: clean the find an expert cache, before this presave, because uom_fae_api_person_supervision always return cache data.
  $supervision = uom_fae_api_person_supervision($account->field_fae_resource[LANGUAGE_NONE][0]['url']);
  $supervision_status = (!empty($supervision) && $supervision['supervisor'] == 'Y') ? 1 : 0;
  user_save($account, $edit = array('field_person_supervision', $supervision_status));
  return 1;
}


function _faeprofile_author_text($label_str, $uri_str, $link_str) {
	$return_str = '';
	$output = array();

	// These always matching up for authors
	$tmp_labels = explode('|', $label_str);
	$tmp_uris = explode('|', $uri_str);
	$tmp_links = explode('|', $link_str);	

	_faeprofile_filter_author_text($tmp_labels, $tmp_uris, $tmp_links, $labels, $uris, $links);

	$i = 0;
	foreach($labels as $label) {
		// Prepare
		$posi_num = _faeprofile_get_pub_posi_num($uris[$i]);
		$new_label = trim(_faeprofile_get_internal_label($label, $links[$i]));

		$output[$i] = array(
			'label' => $new_label,
			'posi_num' => $posi_num, 
		);

		++$i;
	}
	usort($output, "_faeprofile_sort_pub_posi");

	// Build string
	foreach($output as $item) {
		$return_str .= $item['label']. ', ';	
	}
	$return_str = substr($return_str, 0, -2);

	//test
	//dsm($return_str);
	
	return $return_str;
}


function _faeprofile_sort_pub_posi($a, $b) {
	$int_a = (int) $a['posi_num'];
	$int_b = (int) $b['posi_num'];

	return ($int_a - $int_b); 
}


function _faeprofile_get_internal_label($label='', $link='') {
	$new_label = '';

	if($link == 'empty' || $link == '') {
		$new_label = $label;
	}
	else {
		$tmp_label = _faeprofile_find_person_name_in_drupal($link);
		if(empty($tmp_label)) {
			$new_label = $label;
		}
		else {
			$new_label = $tmp_label;
		}
	}
	
	return $new_label;
}


function _faeprofile_get_pub_posi_num($uri) {
	// e.g. http://www.findanexpert.unimelb.edu.au/individual/publication96292position1Y
	// Need to get 1 as position
	$pattern = "/.+(\d)\w$/i";
  preg_match($pattern, $uri, $matches);	
	$num = $matches[1];
	return $num;	
}


function _faeprofile_editor_text($label_str, $uri_str, $link_str) {
	$return_str = '';

	// We use joseki person label for user's name
	if(empty($label_str)) {

	}
	else {
		$tmp_labels = explode('|', $label_str);
		$tmp_uris = explode('|', $uri_str);

		_faeprofile_filter_editor_text($tmp_labels, $tmp_uris, $labels, $uris);

		$i = 0;
  	foreach($labels as $label) {
    	// Prepare
    	$posi_num = _faeprofile_get_pub_posi_num($uris[$i]);

    	$output[$i] = array(
      	'label' => trim($label),
      	'posi_num' => $posi_num,
    	);
    	++$i;
  	}
  	usort($output, "_faeprofile_sort_pub_posi");
		
		// Build string
  	foreach($output as $item) {
    	$return_str .= $item['label']. ', ';
  	}
  	$return_str = substr($return_str, 0, -2);			
	}

	return $return_str;
}


function _faeprofile_person_text($label_str, $uri_str) {
	$return_str = '';

  // We use joseki person label for user's name
  if(empty($label_str)) {

  }
  else {
    $labels = explode('|', $label_str);
    $uris = explode('|', $uri_str);

    $i = 0;
    foreach($labels as $label) {
      // Prepare
      $posi_num = _faeprofile_get_pub_posi_num($uris[$i]);

      $output[$i] = array(
        'label' => trim($label),
        'posi_num' => $posi_num,
      );
      ++$i;
    }
    usort($output, "_faeprofile_sort_pub_posi");

    // Build string
    foreach($output as $item) {
      $return_str .= $item['label']. ', ';
    }
    $return_str = substr($return_str, 0, -2);
  }

  return $return_str;
}


function _faeprofile_filter_author_text($tmp_labels, $tmp_uris, $tmp_links, &$labels, &$uris, &$links) {
	$labels = array();
	$uris = array();
	$links = array();

	$i = 0;
	foreach($tmp_labels as $tmp_label) {
		if(!in_array($tmp_label, $labels)) {
			// Label
			$labels[] = $tmp_label;
			
			// Uri
			$uris[] = $tmp_uris[$i];
			
			// Link
			$links[] = $tmp_links[$i];
		}
		++$i;
	}
}


function _faeprofile_filter_editor_text($tmp_labels, $tmp_uris, &$labels, &$uris) {
  $labels = array();
  $uris = array();

	$i = 0;
  foreach($tmp_labels as $tmp_label) {
    if(!in_array($tmp_label, $labels)) {
      // Label
      $labels[] = $tmp_label;

      // Uri
      $uris[] = $tmp_uris[$i];
    }
    ++$i;
  }
}


function _faeprofile_page_start_end($page_start='', $page_end='') {
	$output = '';

	if(!empty($page_start) && !empty($page_end)) {
  	$output = ' '. $page_start. '-'. $page_end;
  }
  else {
  	$output = $page_start. $page_end;
  }
	
	return $output;
}

function _faeprofile_member_start_end($page_start='', $page_end='') {
	$output = '';

  if(!empty($page_start) && !empty($page_end)) {
    $output = ' '. $page_start. '-'. $page_end;
  }
	elseif(!empty($page_start) && empty($page_end)) {
		$output = ' '. $page_start. '-';
	}
  else {
    $output = $page_start. $page_end;
  }

  return $output;
}

/**
 * Turn a publication type URI into a label.
 */
function _faeprofile_publication_type($uri) {
	// Early return.
  if (empty($uri)) {
    return t('Other Works');
  }

  // The final two characters of the publication type uri match our array.
  $type_code = substr($uri, strlen('http://www.findanexpert.unimelb.edu.au/ontology/PublicationType'));
	$type_text = uom_fae_api_publication_types($type_code);

	$output = array('type_code' => $type_code, 'type_text' => $type_text);
  return $output; 
}

function _faeprofile_publication_select_theme($pub) {
	// NOTE: if you want to see a complete pub type list.
	// Go to

	// You are doing the whole book
	$whole_book_array = array(
		'A',
		'A1', // 'A1'  => t('Authored Research Book'),
    'A2', // 'A2'  => t('Edited Book'),
    'A3', // 'A3'  => t('Revision/New Edition'),
    'A5', // 'A5'  => t('Text Book'),
    'A6', // 'A6'  => t('Authored Book (Other)'),
	);

	// Translated book
	$translated_book_array = array(
		'A4' // 'A4'  => t('Translated Book'),
	);

	// You are doing chapters only
	$chapter_array = array(
		'B',
		'B1', // 'B1'  => t('Chapter in Research Book'),
    'B2', // 'B2'  => t('Chapters in Books (Other)'),
	);

	// Journal
  $journal_array = array(
		'C',
    'C1', // 'C1'  => t('Article in scholarly refereed journal'),
    'C2', // 'C2'  => t('Article in unrefereed journal (including articles in professional journals)'),
		'C3', // 'C3'  => t('Unrefereed Letter or Note'),
    'C5', // 'C5'  => t('Other refereed contribution to a refereed journal'),
  );

	// Reference
	$reference_array = array(
		'D4', // Major reference works
    'F1', // Full written papers refereed
    'F2', // Full written papers unrefereed
	);

	// Type code
	$type_code = $pub['type_code'];
	$output = '';

	if(in_array($type_code, $whole_book_array)) {
		// Whole book
		$output = theme('faeprofile_publication_whole_book', array('publication' => $pub));			
	}
	else if(in_array($type_code, $translated_book_array)) {
		// Translated book
		$output = theme('faeprofile_publication_translated_book', array('publication' => $pub));		
	}
  else if(in_array($type_code, $chapter_array)) {
  	// Chapter  
		$output = theme('faeprofile_publication_chapter', array('publication' => $pub));
  }
	else if(in_array($type_code, $journal_array)) {
		// Journal
		$output = theme('faeprofile_publication_journal', array('publication' => $pub));
	}
	else {
		// Default
		$output = theme('faeprofile_publication_default', array('publication' => $pub));		
	}

	return $output;
}

function _faeprofile_remove_title($text) {
	/*
		e.g. $text = 'mr anthony gardner';
	*/

	$output = $text;

	$title_array = array(
		'mr',
		'mrs',
		'ms',
		'miss',
		'prof',
		'a\/prof', // escape
		'dr',
	);

	foreach($title_array as $element) {
		$pattern_check = '/^'. $element. '/i';
		$pattern_replace = '/'. $element. '/i';
		if(preg_match($pattern_check, $text)) {
			$output = preg_replace($pattern_replace, '', $text, 1);
			break;
		}
	}
	
	return $output;
}


function _faeprofile_extra_grant($person_uri) {
  $args = array(
    ':uri' => $person_uri,
  );
  $result = uom_fae_api_query(UOM_FAE_PERSON_EXTRA_GRANT, $args);

	// Hack
	if(empty($result)) {
		return '';
	}

	$text_array = $result['rows'][0];
	$part_1 = $part_2 = $part_3 = $part_4 = '';


	if(is_array($text_array)) {
		if(array_key_exists('extraGrantText1', $text_array)) {
			$part_1 = $text_array['extraGrantText1'];
		}

		if(array_key_exists('extraGrantText2', $text_array)) {
    	$part_2 = $text_array['extraGrantText2'];
  	} 

		if(array_key_exists('extraGrantText2', $text_array)) {
    	$part_2 = $text_array['extraGrantText2'];
  	} 

		if(array_key_exists('extraGrantText3', $text_array)) {
    	$part_3 = $text_array['extraGrantText3'];
  	}

		if(array_key_exists('extraGrantText4', $text_array)) {
    	$part_4 = $text_array['extraGrantText4'];
  	}
	}

	$return_string = $part_1. $part_2. $part_3. $part_4;

  return $return_string;
}

function _my_pub_type_compare($a, $b) {
if ($a == $b) {return 0;}
  $order= uom_fae_api_publication_types();
  $position = array_search($a,$order);
  $position2 = array_search($b, $order);

  //if both are in the $order, then sort according to their order in $order...
  if ($position2!==false && $position!==false) {return ($position < $position2) ? -1 : 1;}
  //if only one is in $order, then sort to put the one in $order first...
  if($position!==false) {return -1;}
  if($position2!==false) {return 1;}

  //if neither in $order, then a simple alphabetic sort...
  return ($a < $b) ? -1 : 1;
}


function _faeprofile_find_person_name_in_drupal($person_link = '') {
	// field_fae_resource_url is http://www.findanexpert.unimelb.edu.au/individual/person13547
	// or www.findanexpert.unimelb.edu.au/individual/person13547
	$person_link = preg_replace("(https?://)", "", $person_link);
	
	$person_name = '';
	
	$query = db_select('field_data_field_fae_resource', 'res');
	$query->join('field_data_field_profile_display_name', 'dname', 'res.entity_id = dname.entity_id');
	$query->condition('res.entity_type', 'user', '=');
	$query->condition('res.field_fae_resource_url', $person_link. '$', 'REGEXP');

  $result = $query->fields('dname', array('field_profile_display_name_value'))
    ->execute()
    ->fetchAssoc(); // Assume only 1 match

 	if(isset($result['field_profile_display_name_value']) && !empty($result['field_profile_display_name_value'])) {
  	$person_name = $result['field_profile_display_name_value'];
  }
  else {
  	$person_name = '';
  }
  return $person_name;
}


function _get_fae_id_by_uri($uri) {
	// Expected uri == http://www.findanexpert.unimelb.edu.au/individual/person26101
	$faeprofile_id = '';

	if(!empty($uri)) {
		$pattern = "/\d+$/";

		if(preg_match($pattern, $uri, $matches))
		{
   		 $faeprofile_id = $matches[0];	
		}
		else {
		}
	}
	else {

	}

	return $faeprofile_id;
}
