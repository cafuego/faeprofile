<?php
/**
 * Overview, Affiliation, Publications, Research, Awards, Linkages, Supervision.
 */

/**
 * Helper that is used to create menu callbacks and blocks for the various elements.
 *
 * @param $enabled_only
 *   Boolean that determines whether all or only enabled elemnts should
 *   be returned.
 */
function faeprofile_elements($enabled_only = FALSE) {
  $elements = array(
    'overview' => t('Overview'),
    'affiliations' => t('Affiliation'),
    'publications' => t('Publications'),
    'research' => t('Research'),
    'awards' => t('Awards'),
    'linkages' => t('Linkages'),
    'supervision' => t('Supervision'),
    'information' => t('Information'),
    'contact' => t('Contact'),
  );

  if (!$enabled_only) {
    return $elements;
  }

  $enabled = array_filter(variable_get('faeprofile_elements', array()));
  return array_intersect_key($elements, $enabled);
}

/**
 * Helper to return a label for a given element.
 */
function faeprofile_element_label($element) {
  $elements = faeprofile_elements();
  return $elements[$element];
}

/**
 * Implements hook_init().
 */
function faeprofile_init() {
  drupal_add_css( drupal_get_path('module', 'faeprofile') . '/css/faeprofile.css');
}

/**
 * Implements hook_permission().
 */
function faeprofile_permission() {
  $permissions = array();

  $permissions['administer faeprofile'] = array(
    'title' => t('Administer FaE Profile'),
    'description' => t('Choose which FaE Profile tabs are shown on user profile pages.'),
  );

  foreach (faeprofile_elements() as $element => $label) {
    $permissions['view faeprofile ' . $element] = array(
      'title' => t('View FaE @label information', array('@label' => $label)),
      'description' => t('View Find an Expert @label information on user profiles', array('@label' => $label)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function faeprofile_menu() {
  $items = array();
  $weight = 0;

  $items['admin/config/people/faeprofile'] = array(
    'title' => t('FaE Profile'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faeprofile_settings_form'),
    'access arguments' => array('administer faeprofile'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'faeprofile.admin.inc',
  );

	/*
  foreach (faeprofile_elements(TRUE) as $element => $label) {
		if ($element == 'overview' || $element == 'contact') {
      continue;
    }

    $function = 'faeprofile_page_' . $element;
    $items['user/%user/' . $element] = array(
      'title' => t('@element', array('@element' => $label)),
      'page callback' => $function,
      'page arguments' => array(1),
      'access callback' => 'faeprofile_user_access',
      'access arguments' => array('view faeprofile ' . $element, 1),
      'type' => MENU_LOCAL_TASK,
      'weight' => ++$weight,
      'file' => 'faeprofile.pages.inc',
    );
  }
	*/

  return $items;
}

/**
 * Access callback for faeprofile tabs.
 *
 * Return TRUE only if a user has the correct permission and the resource
 * is present.
 */
function faeprofile_user_access($permission, $account) {
  $access = user_access($permission);

  // Seperate check for the extra profile field.
  if ($permission == 'view faeprofile information') {
    $value = trim(strip_tags($account->field_profile_profile['und'][0]['value']));
    $resource = !empty($value);
  }
  else {
    $resource = !empty($account->field_fae_resource['und'][0]['url']);
  }

  return ($access && $resource);
}

/**
 * Implements hook_menu_alter().
 */
function faeprofile_menu_alter(&$items) {
  if (variable_get('faeprofile_main', 0)) {
    $items['user/%user/view']['title'] = t('Overview');
    $items['user/%user/edit']['weight'] = 10;
  }
}

/**
 * Implements hook_block_info().
 */
function faeprofile_block_info() {
  $blocks = array();
  foreach (faeprofile_elements() as $element => $label) {
    $blocks[$element]['info'] = t('Fae Profile: @element', array('@element' => $label));
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function faeprofile_block_view($delta) {
  // Only show on a user page.
  if ((arg(0) != 'user') && (count(arg()) < 2)) {
    return array();
  }

  module_load_include('inc', 'faeprofile', 'faeprofile.pages');
  $function = 'faeprofile_page_' . $delta;

  if (!function_exists($function)) {
    return array();
  }

  $account = menu_get_object('user');
  if (empty($account->field_fae_resource['und'][0]['url'])) {
    return array();
  }

  return array(
    'subject' => t('FaE Profile @delta', array('@delta' => ucwords($delta))),
    'content' => call_user_func($function, $account),
  );
}

/**
 * Implements hook_user_presave().
 */
function faeprofile_user_presave(&$edit, $account, $category) {
  if (!function_exists('uom_fae_api_person_supervision')) {
    return;
  }

  // If missing the user field that stores supervisor status...
  if (isset($account->field_person_supervision)) {
    return;
  }

  // Load the supervisor status from FaE and set a flag on the user.
  if (!empty($account->field_fae_resource[LANGUAGE_NONE][0]['url'])) {
    $supervision = uom_fae_api_person_supervision($account->field_fae_resource[LANGUAGE_NONE][0]['url']);
    $edit['field_person_supervision'][LANGUAGE_NONE][0]['value'] = (!empty($supervision) && $supervision['supervisor'] == 'Y') ? 1 : 0;
  }
}

/**
 * Implements hook_user_view().
 */
function faeprofile_user_view($account, $view_mode, $langcode) {

  module_load_include('inc', 'faeprofile', 'faeprofile.pages');

  if (!function_exists('faeprofile_page_overview')) {
    return;
  }

	/*
  if (user_access('view faeprofile overview')) {
    $account->content['faeprofile_overview'] = array(
      '#type' => 'user_profile_item',
      '#markup' => faeprofile_page_overview($account),
      '#attributes' => array('class' => array('faeprofile-overview')),
      '#weight' => -10,
    );
  }
	*/

  if (variable_get('faeprofile_information', 0) && user_access('view faeprofile information')) {
    $account->content['faeprofile_information'] = array(
      '#type' => 'user_profile_item',
      '#markup' => faeprofile_page_information($account),
      '#attributes' => array('class' => array('faeprofile-information')),
      '#weight' => -9,
    );
  }

}

/**
 * Implements template_preprocess_user_profile().
 *
 * Turn off all but the overview, if required.
 */
function faeprofile_preprocess_user_profile(&$variables) {
  if (!variable_get('faeprofile_main', 0)) {
    return;
  }

  foreach (element_children($variables['user_profile']) as $element) {
    if ($element != 'faeprofile_overview' && $element != 'faeprofile_information') {
      unset($variables['user_profile'][$element]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function faeprofile_theme() {
  return array(
    'faeprofile_information' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-information',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_overview' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-overview',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_contact' => array(
      'variables' => array(
        'data' => array(
          'email' => '',
          'phone' => '',
          'webpage' => '',
          'room' => '',
          'building' => 'University of Melbourne',
          'supervisor' => 'N',
        ),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-contact',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_affiliations' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-affiliations',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_publications' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-publications',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_research' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-research',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_awards' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-awards',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_linkages' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-linkages',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_supervision' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
      'template' => 'faeprofile-supervision',
      'path' => drupal_get_path('module', 'faeprofile') . '/templates',
    ),
    'faeprofile_image' => array(
      'variables' => array(
        'uri' => NULL,
        'style' => 'medium'
      ),
    ),
    'faeprofile_affiliation' => array(
      'variables' => array(
        'affiliation' => NULL,
      ),
    ),
    'faeprofile_publication' => array(
      'variables' => array(
        'publication' => NULL,
      ),
    ),
    'faeprofile_grant' => array(
      'variables' => array(
        'grant' => NULL,
      ),
    ),
    'faeprofile_award' => array(
      'variables' => array(
        'award' => NULL,
      ),
    ),
    'faeprofile_linkage' => array(
      'variables' => array(
        'linkage' => NULL,
      ),
    ),
    'faeprofile_supervisor' => array(
      'variables' => array(
        'available' => 'N',
      ),
    ),
  );
}

/**
 * Create an image from a FaE resource URI.
 */
function theme_faeprofile_image($vars) {
  if (empty($vars['uri'])) {
    return NULL;
  }
  $ret = preg_match('/^(http:\/\/[A-Za-z0-9\.-]+)\/[a-z]+\/([a-z]+)([0-9]+)$/', $vars['uri'], $matches);
  if (!$ret) {
    return NULL;
  }
  $image = $matches[1] . '/pictures/' . $matches[3] . 'picture.jpg';

  return theme('imagecache_external', array('path' => $image, 'style_name' => $vars['style']));
}

/**
 * Theme a supervision status.
 */
function theme_faeprofile_supervisor($vars) {
  $available = $vars['available'];
  return ($vars['available'] == 'Y') ? t('<span class="faeprofile-supervisor-available">Available</span>') : t('<span class="faeprofile-supervisor-unavailable">Not available</span>');
}

/**
 * Theme a grant.
 */
function theme_faeprofile_grant($vars) {
  $output = t('<a href="!link">!title</a> (@scheme) awarded by @organisation', array(
    '!title' => $vars['grant']['grant'],
    '!link' => $vars['grant']['link'],
    '@scheme' => !empty($vars['grant']['scheme']) ? $vars['grant']['scheme'] . '.' : '',
    '@organisation' => $vars['grant']['organisation']
  ));

  if (!empty($vars['grant']['start'])) {
    $output .= t(' <span class="faeprofile-listDateTime">@start-@end</span>', array(
      '@start' => $vars['grant']['start'],
      '@end' => $vars['grant']['end'],
    ));
  }

  return $output;
}

/**
 * Theme an award.
 */
function theme_faeprofile_award($vars) {
	// If award label start with comma (year is missing at the start), remove it.
	// e.g. ", Institute for Aegean Prehistory"
	$title = ltrim($vars['award']['award'], ", ");

  $output = t('<a href="!link">!title</a>, @organisation', array(
    '!title' => $title,
    '!link' => $vars['award']['link'],
    '@organisation' => $vars['award']['organisation']
  ));

  if (!empty($vars['award']['year'])) {
    $output .= t(' <span class="faeprofile-listDateTime">@year</span>', array(
      '@year' => $vars['award']['year'],
    ));
  }

  return $output;
}

/**
 * Theme a linkage.
 */
function theme_faeprofile_linkage($vars) {
  return t('!organisation (@role)', array(
    '!organisation' => l($vars['linkage']['orgLabel'], $vars['linkage']['org']),
    '@role' => $vars['linkage']['roleLabel'],
  ));
}

/**
 * Theme an affiliation.
 */
function theme_faeprofile_affiliation($vars) {
  return t('@organisation. @role', array(
    '@organisation' => $vars['affiliation']['organisation'],
    '@role' => $vars['affiliation']['role']
  ));
}

/**
 * Theme a publication.
 */
function theme_faeprofile_publication($vars) {
  $output = t('<a href="!link">!title</a>. %publication @publisher', array(
    '!title' => strip_tags($vars['publication']['title']),
    '!link' => $vars['publication']['link'],
    '%publication' => !empty($vars['publication']['publication']) ? $vars['publication']['publication'] . '.' : '',
    '@publisher' => $vars['publication']['publisher']));

  if (!empty($vars['publication']['volume'])) {
    $output .= t(' @volume', array('@volume' => $vars['publication']['volume']));
  }
  else if (!empty($vars['publication']['edition'])) {
    $output .= t(' @edition', array('@edition' => $vars['publication']['edition']));
  }

  if (!empty($vars['publication']['page_start'])) {
    $output .= t(':@start', array('@start' => $vars['publication']['page_start']));

    if (!empty($vars['publication']['page_end'])) {
      $output .= t('-@end', array('@end' => $vars['publication']['page_end']));
    }
  }

  $output .= t(' <span class="faeprofile-listDateTime">@year</span>', array('@year' => $vars['publication']['year']));

  return $output;
}

/**
 * Preprocess functions for faeprofile information.
 */
function template_preprocess_faeprofile_information(&$vars) {
  $information = $vars['data'];
  $vars['information'] = $information[0]['safe_value'];
}

/**
 * Preprocess functions for faeprofile overview.
 */
function template_preprocess_faeprofile_overview(&$vars) {
  $overview = $vars['data'];
  $vars['overview'] = '';

  if (empty($overview) || $overview == 'Empty') {
    return;
  }

  $vars['overview'] = $overview['overviewText1']. $overview['overviewText2']. $overview['overviewText3']. $overview['overviewText4'];
}

/**
 * Preprocess functions for faeprofile affiliation.
 */
function template_preprocess_faeprofile_affiliations(&$vars) {
  $affiliations = $vars['data'];
  $vars['affiliations'] = array();

  // Early return with empty vars if there are no items to process.
  if (empty($affiliations)) {
    return;
  }

  foreach ($affiliations as $affiliation) {
    $temp = array(
      'organisation' => check_plain($affiliation['orgLabel']),
      'role' => check_plain($affiliation['roleLabel']),
    );
    $vars['affiliations'][] = theme('faeprofile_affiliation', array('affiliation' => $temp));
  }
}

/**
 * Preprocess functions for faeprofile publications.
 */
function template_preprocess_faeprofile_publications(&$vars) {
  $uri = $vars['uri'];
  $publications = $vars['data'];

  $vars['publications'] = array();
  $vars['year'] = array();

  // Early return with empty vars if there are no items to process.
  if (empty($publications)) {
    return;
  }

  foreach ($publications as $publication) {
    $datestamp = strtotime($publication['dateValue']);
    $temp = array(
      'publication' => $publication['publication'],
      'title' => $publication['title'],
      'link' => $publication['article'],
      'publisher' => $publication['publishOrg'],
      'page_start' => $publication['pageStart'],
      'page_end' => $publication['pageEnd'],
      'edition' => $publication['edition'],
      'volume' => $publication['volume'],
      'isbn13' => $publication['isbn13'],
      'date' => date('Y', $datestamp),
      'year' => date('Y', $datestamp),
    );

    $vars['publications'][] =  $vars['year'][$temp['year']][] = theme('faeprofile_publication', array('publication' => $temp));
  }
  krsort($vars['year']);
}

/**
 * Preprocess functions for faeprofile research.
 */
function template_preprocess_faeprofile_research(&$vars) {
  $uri = $vars['uri'];
  $research = $vars['data'];

  $vars['research'] = array();
  $vars['grants'] = array();
  $vars['schemes'] = array();
  $vars['year'] = array();

  // Early return with empty vars if there are no items to process.
  if (empty($research)) {
    return;
  }

  foreach ($research as $grant) {
    $startstamp = strtotime($grant['dateStart']);
    $endstamp = strtotime($grant['dateEnd']);

    $vars['research'][] = array(
      'grant' => $grant['grantLabel'],
      'link' => $grant['grant'],
      'scheme' => $grant['grantScheme'],
      'role' => $grant['roleLabel'],
      'organisation' => $grant['orgLabel'],
      'start' => (!empty($startstamp)) ? date('Y', $startstamp) : '',
      'end' => (!empty($endstamp)) ? date('Y', $endstamp) : '',
    );
  }

  // Do some grouping of research grants.
  foreach ($vars['research'] as $grant) {
    $vars['grants'][] = $vars['schemes'][$grant['scheme']][] = $vars['year'][$grant['start']][] = theme('faeprofile_grant', array('grant' => $grant));
  }
  krsort($vars['schemes']);
  krsort($vars['year']);
}

/**
 * Preprocess functions for faeprofile awards.
 */
function template_preprocess_faeprofile_awards(&$vars) {
  $awards = $vars['data'];

  $vars['awards'] = array();
  $vars['year'] = array();

  // Early return with empty vars if there are no items to process.
  if (empty($awards)) {
    return;
  }

  foreach ($awards as $award) {
    $timestamp = strtotime($award['dateValue']);

    $temp = array(
      'award' => $award['awardLabel'],
      'link' => $award['award'],
      'organisation' => $award['orgLabel'],
      'year' => (!empty($timestamp)) ? date('Y', $timestamp) : '',
    );
    $vars['awards'][] = $vars['year'][$temp['year']][] = theme('faeprofile_award', array('award' => $temp));
  }

  krsort($vars['year']);
}

/**
 * Preprocess functions for faeprofile linkages.
 */
function template_preprocess_faeprofile_linkages(&$vars) {
  $linkages = $vars['data'];
  $vars['linkages'] = array();

  // Early return with empty vars if there are no items to process.
  if (empty($linkages)) {
    return;
  }

  foreach ($linkages as $linkage) {
    $vars['linkages'][] = theme('faeprofile_linkage', array('linkage' => $linkage));
  }
}

/**
 * Preprocess functions for faeprofile supervision.
 */
function template_preprocess_faeprofile_supervision(&$vars) {
  $supervision = $vars['data'];
  $vars['available'] = theme('faeprofile_supervisor', array('available' => $supervision['supervisor']));
  $vars['overview'] = $supervision['supervisorText1'];
}

/**
 * Preprocess functions for faeprofile contact.
 */
function template_preprocess_faeprofile_contact(&$vars) {
  $uri = $vars['uri'];
  $contact = $vars['data'];
  unset($vars['data']);

  $vars['email'] = (!empty($contact['email'])) ? l($contact['email'], 'mailto:' . $contact['email']) : '';
  if (module_exists('unimelb_formatters')) {
    $vars['phone'] = unimelb_formatters_field_formatter_unimelb_html5_phone_link(array('value' => $contact['phone'], 'safe_value' => $contact['phone']));
  }
  else {
    $vars['phone'] = $contact['phone'];
  }
  $vars['webpage'] = (!empty($contact['webpage'])) ? l($contact['webpage'], $contact['webpage']) : '';
  $vars['room'] = $contact['room'];
  $vars['building'] = $contact['building'];
  $vars['supervisor'] = theme('faeprofile_supervisor', array('available'=> $contact['supervisor']));

  $vars['image'] = theme('faeprofile_image', array('uri' => $uri));
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function faeprofile_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * If you do this, Ctools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function faeprofile_ctools_plugin_api($module, $api) {
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * Remove "An illegal choice has been detected. Please contact the site administrator." 
 * in exposed view filter in staff listing page. (i.e. http://site.com/about/staff)
 * https://drupal.org/node/1177882, patch doesn't fix the issue, so remove the error message instead
 */
function faeprofile_preprocess_status_messages(&$vars) {
  $messages = drupal_get_messages('error');
  if (!empty($messages['error'])) {
    $errors = $messages['error'];
    foreach ($errors as $error) {
      if ($error == t('An illegal choice has been detected. Please contact the site administrator.')) {
        continue;
      }

      drupal_set_message($error, 'error');
    }
  }
}
